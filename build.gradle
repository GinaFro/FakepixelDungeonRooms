buildscript {
    repositories {
        jcenter()
        maven {
            name = 'forge'
            url = 'https://files.minecraftforge.net/maven'
        }
        maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

version = "1.0.0"
group= "io.github.quantizr.DungeonRooms" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "FakepixelDungeonRooms"

sourceCompatibility = targetCompatibility = 1.8

sourceSets {
    main {
        output.resourcesDir = java.outputDir
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    clientJvmArgs += "-Dfml.coreMods.load=io.github.quantizr.asm.FMLLoadingPlugin"
    clientRunArgs += "--mixin mixins.dungeonrooms.json"
}

repositories {
    jcenter()
    maven { url "https://repo.spongepowered.org/repository/maven-public/" }
}

configurations {
    packageLib
}


dependencies {
   packageLib("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
    configurations.compile.extendsFrom(configurations.packageLib)
}

mixin {
    add sourceSets.main, "mixins.dungeonrooms.refmap.json"
}


jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest.attributes(
            "FMLCorePlugin": "io.github.quantizr.asm.FMLLoadingPlugin",
            "FMLCorePluginContainsFMLMod": true,
            "ForceLoadAsMod": true,
            "MixinConfigs": "mixins.dungeonrooms.json",
            "ModSide": "CLIENT",
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": "0",
    )

    from {
        configurations.packageLib.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}